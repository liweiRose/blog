(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{217:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"network"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#network","aria-hidden":"true"}},[s._v("#")]),s._v(" Network")]),a("h3",{attrs:{id:"tcp-三次握手-四次挥手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-三次握手-四次挥手","aria-hidden":"true"}},[s._v("#")]),s._v(" TCP 三次握手 四次挥手")]),a("p",[s._v("建立和断开连接的一种策略")]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" 连接\n\n  ① 发送端 发送 一个带"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SYN")]),s._v("标志的数据包 给接收端\n\n  ② 接收端收到后，回传 一个带有"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SYN")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ACK")]),s._v("标志的数据包 确认收到了信息\n\n  ③ 发送端再回传 一个带"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ACK")]),s._v("标志的数据包 代表“握手”结束\n\n tips"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 若在握手过程中某个阶段莫名中断，"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("协议会再次以相同的顺序发送相同的数据包\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 断开 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 连接\n\n  ① 主动关闭方 发送一个 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FIN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("告知对方我已经不再发送数据了"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n  ② 被动关闭方 收到"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FIN")]),s._v("包后，发送一个"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ACK")]),s._v("给对方，确认序号为收到序号"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n  ③ 被动关闭方 再发送一个"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FIN")]),s._v(" （ 告诉主动关闭方，我的数据也发送完了，不会再给你发数据了 ）\n\n  ④ 主动关闭方 收到"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FIN")]),s._v("后，发送一个"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ACK")]),s._v("给被动关闭方，确认序号为收到序号"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n")])])]),a("h3",{attrs:{id:"tcp-和-udp-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-和-udp-的区别","aria-hidden":"true"}},[s._v("#")]),s._v(" TCP 和 UDP 的区别")]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("（Transmission Control Protocol，传输控制协议）\n\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 是基于连接的协议，在正式收发数据前，必须和对方建立可靠的连接。\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 一个 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 连接必须要经过三次“对话”才能建立起来。\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v("（User Data Protocol，用户数据报协议）\n\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 是与 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去。\n\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 适用于一次只传送少量数据、对可靠性要求不高的应用环境。\n")])])]),a("h3",{attrs:{id:"常见-web-安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见-web-安全","aria-hidden":"true"}},[s._v("#")]),s._v(" 常见 web 安全")]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Xss")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cross"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("site scripting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("攻击\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 指的是攻击者往 Web 页面里插入恶意 html 标签或者 javascript 代码\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 如：攻击者在论坛中加一个恶意表单\n\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 如果网站不需要再浏览器端对 cookie 进行操作，可以在 Set"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Cookie 末尾加上 HttpOnly \n    来防止 javascript 代码直接获取 cookie\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 尽量采用 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("POST")]),s._v(" 而非 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GET")]),s._v(" 提交表单\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSRF")]),s._v(" 攻击\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSRF")]),s._v(" 是代替用户完成指定的动作\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 完成一次 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSRF")]),s._v(" 攻击，受害者必须依次完成两个步骤：\n\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 登录受信任网站 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v("，并在本地生成 Cookie\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 在不登出 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v(" 的情况下，访问危险网站 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 在客户端页面增加伪随机数以防御\n")])])]),a("h3",{attrs:{id:"http-和-https"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-和-https","aria-hidden":"true"}},[s._v("#")]),s._v(" HTTP 和 HTTPS")]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 协议通常承载于 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 协议之上\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 默认 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 的端口号为 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 在 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 和 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 之间添加一个安全协议层（"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SSL")]),s._v(" 或 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TSL")]),s._v("）\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v(" 的端口号为 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("443")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 安全性强\n\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 因为网络请求需要中间有很多的服务器路由器的转发。中间的节点都可能篡改信息，所以 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 存在安全性问题\n\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 使用 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v("，密钥在你和终点站才有。\n\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 利用 ssl"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("tls "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("协议传输")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("它包含证书，卸载，流量转发，负载均衡，页面适配，浏览器适配，refer 传递等"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 从而保障了传输过程的安全性。\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" Http "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  引入了“服务端推（server push）”的概念，它允许服务端在客户端需要数据之前就主动地将数据\n          发送到客户端缓存中，从而提高性能。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  提供更多的加密支持。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  使用多路技术，允许多个消息在一个连接上同时交差。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  增加了头压缩（header compression），因此即使非常小的请求，其请求和响应的 header \n          都只会占用很小比例的带宽。\n")])])]),a("h3",{attrs:{id:"cookie-和-session"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie-和-session","aria-hidden":"true"}},[s._v("#")]),s._v(" Cookie 和 session")]),a("ul",[a("li",[a("p",[s._v("Cookie 是一种存储机制，提供持久保存客户端数据的能力")])]),a("li",[a("p",[s._v("session 对象存储在 Cookie 中， 保存一些常用的信息，如：access_token/user_info")])]),a("li",[a("p",[s._v("cookie 数据存放在客户的浏览器上，session 数据放在服务器上")])]),a("li",[a("p",[s._v("每个特定的域名下最多生成 20 个 Cookie")])]),a("li",[a("p",[s._v("Cookie 的最大约为 4096 字节，为了兼容性，一般不能超过 4095 字节")])]),a("li",[a("p",[s._v("每次请求一个新的页面 Cookie 都会被发送过去")])])]),a("h4",{attrs:{id:"应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用","aria-hidden":"true"}},[s._v("#")]),s._v(" 应用")]),a("p",[s._v("由于 http 无状态，所以需要存在一种机制去标识状态")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("- 基于 Cookie 的身份验证 & 验证流程\n\n  - 因为 cookie 验证有状态 所以会话信息(session) 同时保存在客户端(cookie) 和 服务端(sql)\n\n  - cookie 绑定单域 a.com 生成的不能再 b.com 中用\n\n  - 流程:\n    - 用户登录获取凭证\n    - 服务器验证凭证正确与否\n    - 若验证通过创建会话（set-cookie）(服务端存一份，浏览器端直接写入到 cookie，根据是否设置 http-only 决定浏览器端是否可操作 cookie，获取 session 拿到凭证信息)\n    - 后续请求均走上述验证流程\n    - 若 用户登出 则服务端与浏览器端同时清除 session\n\n- 基于 Token 的身份验证 & 验证流程\n\n  - 基于 JWT（JSON Web Tokens）生成 token\n  - 服务端不需要记录 token\n  - 多站点使用\n  - 支持 ios/Android\n  - 性能较好\n\n  - 流程：\n    - 用户登录获取凭证\n    - 服务器验证凭证，成功则返回一个已经签名后的 token\n    - 客服端存储 token\n    - 客服端请求，头里带上 token\n    - 服务端校验 token 合法性, 是否过期等\n    - 用户登出 客户端销毁 token\n")])])]),a("h3",{attrs:{id:"sessionstorage-和-localstorage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sessionstorage-和-localstorage","aria-hidden":"true"}},[s._v("#")]),s._v(" sessionStorage 和 localStorage")]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v(" sessionStorage\n\nsessionStorage 用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且\n当会话结束后数据也随之销毁。因此 sessionStorage 不是一种持久化的本地存储，仅仅是会话级别的存储。\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" localStorage\n\nlocalStorage 用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。\n")])])]),a("h3",{attrs:{id:"一个页面从输入-url-到页面加载显示完成，这个过程中都发生了什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个页面从输入-url-到页面加载显示完成，这个过程中都发生了什么？","aria-hidden":"true"}},[s._v("#")]),s._v(" 一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？")]),a("ul",[a("li",[a("p",[s._v("（1) 当发送一个 URL 请求时，不管这个 URL 是 Web 页面的 URL 还是 Web 页面上每个资源的 URL，浏览器都会开启一个线程来处理这个请求，同时在远程 DNS 服务器上启动一个  DNS 查询。这能使浏览器获得请求对应的 IP 地址。")])]),a("li",[a("p",[s._v("（2)浏览器与远程"),a("code",[s._v("Web")]),s._v("服务器通过"),a("code",[s._v("TCP")]),s._v("三次握手协商来建立一个"),a("code",[s._v("TCP/IP")]),s._v("连接。该握手包括一个同步报文，一个同步-应答报文和一个应答报文， 这三个报文在 浏览器和服务器之间传递。该握手首先由客户端尝试建立起通信，而后服务器应答并接受客户端的请求，最后由客户端发出该请求已经被接受的报文。")])]),a("li",[a("p",[s._v("（3)一旦"),a("code",[s._v("TCP/IP")]),s._v("连接建立，浏览器会通过该连接向远程服务器发送"),a("code",[s._v("HTTP")]),s._v("的"),a("code",[s._v("GET")]),s._v("请求。远程服务器找到资源并使用 HTTP 响应返回该资源，值为 200 的 HTTP 响应状态表示一个正确的响应。")])]),a("li",[a("p",[s._v("（4)此时，"),a("code",[s._v("Web")]),s._v("服务器提供资源服务，客户端开始下载资源。")])]),a("li",[a("p",[s._v("（5)前端层面，浏览器会解析"),a("code",[s._v("HTML")]),s._v("生成"),a("code",[s._v("DOM Tree")]),s._v("，其次会根据 CSS 生成 CSS Rule Tree，而"),a("code",[s._v("javascript")]),s._v("又可以根据"),a("code",[s._v("DOM API")]),s._v("操作"),a("code",[s._v("DOM")])])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n  详细版：\n  1、浏览器会开启一个线程来处理这个请求，对 URL 分析判断如果是 http 协议就按照 Web 方式来处理;\n  2、调用浏览器内核中的对应方法，比如 WebView 中的 loadUrl 方法;\n  3、通过 DNS 解析获取网址的 IP 地址，设置 UA 等信息发出第二个 GET 请求;\n  4、进行 HTTP 协议会话，客户端发送报头(请求报头);\n  5、进入到 web 服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器;\n  6、进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理;\n  7、处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致则返回 304;\n  8、浏览器开始下载 html 文档(响应报头，状态码 200)，同时使用缓存;\n  9、文档树建立，根据标记请求所需指定 MIME 类型的文件（比如 css、js）,同时设置了 cookie;\n  10、页面开始渲染 DOM，JS 根据 DOM API 操作 DOM,执行事件绑定等，页面显示完成。\n\n  简洁版：\n  浏览器根据请求的 URL 交给 DNS 域名解析，找到真实 IP，向服务器发起请求；\n  服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；\n  浏览器对加载到的资源（HTML、JS、CSS 等）进行语法解析，建立相应的内部数据结构（如 HTML 的 DOM）；\n  载入解析到的资源文件，渲染页面，完成。\n\n")])])]),a("blockquote",[a("p",[s._v("这里可扩展，这里只是简单说说")])]),a("h3",{attrs:{id:"同源策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同源策略","aria-hidden":"true"}},[s._v("#")]),s._v(" 同源策略")]),a("ul",[a("li",[a("p",[s._v("指的是：协议，域名，端口相同，同源策略是一种安全协议")])]),a("li",[a("p",[s._v("为什么要有同源限制?")]),a("ul",[a("li",[s._v("因为可以利用 Iframe 把真正的银行登录页面嵌到他的页面上，当你使用真实的用户名，密码登录时，他的页面就可以通过 Javascript 读取到你的表单中 input 中的内容")])])])]),a("h3",{attrs:{id:"get-和-post-的区别，何时使用-post？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-的区别，何时使用-post？","aria-hidden":"true"}},[s._v("#")]),s._v(" GET 和 POST 的区别，何时使用 POST？")]),a("ul",[a("li",[a("p",[s._v("GET：一般用于信息获取，使用 URL 传递参数，对所发送信息的数量也有限制，一般在 2000 个字符")])]),a("li",[a("p",[s._v("POST：一般用于修改服务器上的资源，对所发送的信息没有限制。")])]),a("li",[a("p",[s._v("GET 方式需要使用 Request.QueryString 来取得变量的值，而 POST 方式通过 Request.Form 来获取变量的值，也就是说 Get 是通过地址栏来传值，而 Post 是通过提交表单来传值。")])]),a("li",[a("p",[s._v("然而，在以下情况中，请使用 POST 请求：")]),a("ul",[a("li",[a("p",[s._v("无法使用缓存文件（更新服务器上的文件或数据库）")])]),a("li",[a("p",[s._v("向服务器发送大量数据（POST 没有数据量限制）")])]),a("li",[a("p",[s._v("发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠")])])])])]),a("h3",{attrs:{id:"http-状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-状态码","aria-hidden":"true"}},[s._v("#")]),s._v(" HTTP 状态码")]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" Continue 继续，一般在发送 post 请求时，\n      已发送了 http header 之后服务端将返回此信息，表示确认，之后发送具体参数信息\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OK")]),s._v(" 正常返回信息\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("201")]),s._v(" Created 请求成功并且服务器创建了新的资源\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("202")]),s._v(" Accepted 服务器已接受请求，但尚未处理\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("301")]),s._v(" Moved Permanently 请求的网页已永久移动到新位置。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("302")]),s._v(" Found 临时性重定向。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("303")]),s._v(" See Other 临时性重定向，且总是使用 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GET")]),s._v(" 请求新的 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URI")]),s._v("。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("304")]),s._v(" Not Modified 自从上次请求后，请求的网页未修改过。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("400")]),s._v(" Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("401")]),s._v(" Unauthorized 请求未授权。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("403")]),s._v(" Forbidden 禁止访问。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("404")]),s._v(" Not Found 找不到如何与 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URI")]),s._v(" 相匹配的资源。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),s._v(" Internal Server Error 最常见的服务器端错误。\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("503")]),s._v(" Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。\n\n")])])]),a("h3",{attrs:{id:"网络七层模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络七层模型","aria-hidden":"true"}},[s._v("#")]),s._v(" 网络七层模型")]),a("ul",[a("li",[a("p",[s._v("应用层：应用层、表示层、会话层（从上往下）（HTTP、FTP、SMTP、DNS）")])]),a("li",[a("p",[s._v("传输层（TCP 和 UDP）")])]),a("li",[a("p",[s._v("网络层（IP）")])]),a("li",[a("p",[s._v("物理和数据链路层（以太网）")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("\n  物理层：通过媒介传输比特"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("确定机械及电气规范（比特Bit）\n\n  数据链路层：将比特组装成帧和点到点的传递（帧Frame）\n\n  网络层：负责数据包从源到宿的传递和网际互连（包PackeT）\n\n  传输层：提供端到端的可靠报文传递和错误恢复（段Segment）\n\n  会话层：建立、管理和终止会话（会话协议数据单元"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SPDU")]),s._v("）\n\n  表示层：对数据进行翻译、加密和压缩（表示协议数据单元"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PPDU")]),s._v("）\n\n  应用层：允许访问"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OSI")]),s._v("环境的手段（应用协议数据单元"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("APDU")]),s._v("）\n\n")])])]),a("h3",{attrs:{id:"网络协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络协议","aria-hidden":"true"}},[s._v("#")]),s._v(" 网络协议")]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ICMP")]),s._v(" 协议： 因特网控制报文协议。它是 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 协议族的一个子协议，用于在 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 主机、路由器之间传递控制消息。\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TFTP")]),s._v(" 协议： 是 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IP")]),s._v(" 协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，提供不复杂、开销不大的文件传输服务。\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 协议： 超文本传输协议，是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DHCP")]),s._v(" 协议： 动态主机配置协议，是一种让系统得以连接到网络上，并获取所需要的配置参数手段。\n\n")])])])])}],!1,null,null,null);t.default=e.exports}}]);